when you are about to start the your own project you have to read documentation 
for the follwoing topics so that u get a great view of the ppackages etc .                      
                                
                                ---Lec6---
1. let's say you want to make a folder public and inside it you want to make another folder say temp.
which you will use in future and u want to push it on git .
as both folders are empty git will not push it so a way to do this is to make a ".gitkeep" file in temp
.gitkeep won't have anything i.e. that will be empty only but now you can push it on github

2. .gitignore - it will contain files that we don't want to push on github say sensitive information etc.
there is a gitingore generator in which if you will type node it will give you general files 
that is not meant for pushing it on github and extras you can add too.

3. environment variables system se uthaye jaate hai jisse ye secure rahe , ye files se nahi uthaye jaate

4. dev dependcies jo build level par contribute na kare file bulk mein
5."scripts": {
    "dev": "nodemon src/index.js"  
  },
--> now npm run dev will say do nodemon src/index.js that is it will run index.js (hamne padha tha na how to run a program from node/nodemon)
this made it easy and nothing else 

6. the format and file str is what and how a professional project should be approached.
                                    ---Lec7---
7. database connection is very imp we are doing mongodb.
8. there are two ways we can connect database .
one way is to store everything in index.js and second is to make another separate folder for database
and put everything there and import it in index.js


9. DB connection time you can get errors so it's better to use ; try-catch block or promises.
and async await should be use because maybe your server/db is in other subcontinent.
10. debugging requries common sense.

                                    ---Lec8---
11. CORS_ORIGIN=*  basically ham origin select karte hai ki kaha se backened access kar sakta hai
example vercel etc etc . and * nahi dena chhaiye specify kar dena chhaiye normally
12. cookie parser iska kaam bas itna hi hai ki mai apne server se user ka broswer ki cookies 
set and access kar paaun , basically crud operations on cookies of user's browser

Client hits a url , next process is to handle the req and give response , now we send response 
in form of json in between we chekc if we are capable of handling the req that is known as middelware
13. Middelware - we can use multiple middelwares , there is a sequence of using multiple middelwares

14. StatusCode (best practices) -
informational responses (100-199)
successful responses (200-299)
redirection messages (300-399)
client error responses (400-499)
server errror responses(500-599)